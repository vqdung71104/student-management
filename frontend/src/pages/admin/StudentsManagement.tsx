import { useState, useEffect, useRef } from 'react'
import * as XLSX from 'xlsx'

interface Student {
  id: number
  student_id: string
  student_name: string
  enrolled_year: number
  course_id: number
  training_level: string
  learning_status: string
  gender: string
  classes?: string
  newest_semester?: string
  department_id?: string
  email: string
  // Auto-calculated fields
  cpa: number
  failed_subjects_number: number
  study_subjects_number: number
  total_failed_credits: number
  total_learned_credits: number
  year_level: string
  warning_level: string
  level_3_warning_number: number
}

interface StudentFormData {
  student_id: string
  student_name: string
  enrolled_year: number
  course_id: number
  training_level: string
  learning_status: string
  gender: string
  classes?: string
  newest_semester?: string
  department_id?: string
}

const StudentsManagement = () => {
  const [students, setStudents] = useState<Student[]>([])
  const [loading, setLoading] = useState(false)
  const [searchTerm, setSearchTerm] = useState('')
  const [filter, setFilter] = useState('all')
  const [showCreateModal, setShowCreateModal] = useState(false)
  const [showEditModal, setShowEditModal] = useState(false)
  const [showViewModal, setShowViewModal] = useState(false)
  const [showUploadModal, setShowUploadModal] = useState(false)
  const [selectedStudent, setSelectedStudent] = useState<Student | null>(null)
  const [formData, setFormData] = useState<StudentFormData>({
    student_id: '',
    student_name: '',
    enrolled_year: new Date().getFullYear(),
    course_id: 1,
    training_level: 'C·ª≠ nh√¢n',
    learning_status: 'ƒêang h·ªçc',
    gender: 'Nam',
    classes: '',
    newest_semester: '',
    department_id: '',
  })

  useEffect(() => {
    fetchStudents()
  }, [])

  const fetchStudents = async () => {
    setLoading(true)
    try {
      const response = await fetch('http://localhost:8000/students')
      if (response.ok) {
        const data = await response.json()
        setStudents(data)
      } else {
        console.error('Failed to fetch students')
        setStudents([])
      }
    } catch (error) {
      console.error('Error fetching students:', error)
      setStudents([])
    }
    setLoading(false)
  }

  const handleCreateStudent = async () => {
    try {
      const response = await fetch('http://localhost:8000/students/', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      })
      
      if (response.ok) {
        setShowCreateModal(false)
        fetchStudents()
        resetForm()
        alert('T·∫°o sinh vi√™n th√†nh c√¥ng!')
      } else {
        alert('C√≥ l·ªói khi t·∫°o sinh vi√™n')
      }
    } catch (error) {
      console.error('Error creating student:', error)
      alert('C√≥ l·ªói khi t·∫°o sinh vi√™n')
    }
  }

  const handleUpdateStudent = async () => {
    if (!selectedStudent) return
    
    try {
      const response = await fetch(`http://localhost:8000/students/${selectedStudent.student_id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      })
      
      if (response.ok) {
        setShowEditModal(false)
        fetchStudents()
        resetForm()
        alert('C·∫≠p nh·∫≠t sinh vi√™n th√†nh c√¥ng!')
      } else {
        alert('C√≥ l·ªói khi c·∫≠p nh·∫≠t sinh vi√™n')
      }
    } catch (error) {
      console.error('Error updating student:', error)
      alert('C√≥ l·ªói khi c·∫≠p nh·∫≠t sinh vi√™n')
    }
  }

  const handleDeleteStudent = async (studentId: String) => {
    if (!confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a sinh vi√™n n√†y?')) return
    
    try {
      const response = await fetch(`http://localhost:8000/students/${studentId}`, {
        method: 'DELETE',
      })
      
      if (response.ok) {
        fetchStudents()
        alert('X√≥a sinh vi√™n th√†nh c√¥ng!')
      } else {
        alert('C√≥ l·ªói khi x√≥a sinh vi√™n')
      }
    } catch (error) {
      console.error('Error deleting student:', error)
      alert('C√≥ l·ªói khi x√≥a sinh vi√™n')
    }
  }

  const resetForm = () => {
    setFormData({
      student_id: '',
      student_name: '',
      enrolled_year: new Date().getFullYear(),
      course_id: 1,
      training_level: 'C·ª≠ nh√¢n',
      learning_status: 'ƒêang h·ªçc',
      gender: 'Nam',
      classes: '',
      newest_semester: '',
      department_id: '',
    })
  }

  const openCreateModal = () => {
    resetForm()
    setShowCreateModal(true)
  }

  const openEditModal = (student: Student) => {
    setSelectedStudent(student)
    setFormData({
      student_id: student.student_id,
      student_name: student.student_name,
      enrolled_year: student.enrolled_year,
      course_id: student.course_id,
      training_level: student.training_level,
      learning_status: student.learning_status,
      gender: student.gender,
      classes: student.classes || '',
      newest_semester: student.newest_semester || '',
      department_id: student.department_id || '',
    })
    setShowEditModal(true)
  }

  const openViewModal = (student: Student) => {
    setSelectedStudent(student)
    setShowViewModal(true)
  }

  const filteredStudents = students.filter(student => {
    const matchesSearch = student.student_name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         student.student_id.includes(searchTerm) ||
                         student.email.toLowerCase().includes(searchTerm.toLowerCase())
    
    if (filter === 'all') return matchesSearch
    return matchesSearch && student.learning_status === filter
  })

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-500"></div>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h1 className="text-3xl font-bold text-gray-900">Qu·∫£n l√Ω sinh vi√™n</h1>
        <div className="flex space-x-2">
          <button 
            onClick={() => setShowUploadModal(true)}
            className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition"
          >
            üìä Upload Excel
          </button>
          <button 
            onClick={openCreateModal}
            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition"
          >
            ‚ûï Th√™m sinh vi√™n
          </button>
        </div>
      </div>

      {/* Search and Filter */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <div className="flex flex-col md:flex-row gap-4">
          <div className="flex-1">
            <input
              type="text"
              placeholder="T√¨m ki·∫øm theo t√™n, m√£ sinh vi√™n, email..."
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>
          <select
            className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
            value={filter}
            onChange={(e) => setFilter(e.target.value)}
          >
            <option value="all">T·∫•t c·∫£ tr·∫°ng th√°i</option>
            <option value="ƒêang h·ªçc">ƒêang h·ªçc</option>
            <option value="B·∫£o l∆∞u">B·∫£o l∆∞u</option>
            <option value="Th√¥i h·ªçc">Th√¥i h·ªçc</option>
            <option value="Bu·ªôc th√¥i h·ªçc">Bu·ªôc th√¥i h·ªçc</option>
          </select>
        </div>
      </div>

      {/* Students Table */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  M√£ SV
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  H·ªç t√™n
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Email
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Tr∆∞·ªùng/Vi·ªán
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Kho√°
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Tr·∫°ng th√°i
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Thao t√°c
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {filteredStudents.map((student) => (
                <tr key={student.id} className="hover:bg-gray-50">
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                    {student.student_id}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {student.student_name}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {student.email}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {student.department_id || 'Ch∆∞a ph√¢n Tr∆∞·ªùng/Vi·ªán'}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {student.course_id || 'Ch∆∞a ph√¢n kh√≥a'}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                      student.learning_status === 'ƒêang h·ªçc'
                        ? 'bg-green-100 text-green-800' 
                        : 'bg-red-100 text-red-800'
                    }`}>
                      {student.learning_status}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium space-x-2">
                    <button 
                      onClick={() => openViewModal(student)}
                      className="text-blue-600 hover:text-blue-900"
                    >
                      üëÅÔ∏è Xem
                    </button>
                    <button 
                      onClick={() => openEditModal(student)}
                      className="text-yellow-600 hover:text-yellow-900"
                    >
                      ‚úèÔ∏è S·ª≠a
                    </button>
                    <button 
                      onClick={() => handleDeleteStudent(student.student_id)}
                      className="text-red-600 hover:text-red-900"
                    >
                      üóëÔ∏è X√≥a
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
        
        {filteredStudents.length === 0 && (
          <div className="text-center py-8">
            <p className="text-gray-500">Kh√¥ng t√¨m th·∫•y sinh vi√™n n√†o</p>
          </div>
        )}
      </div>

      {/* Create Modal */}
      {showCreateModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-md">
            <h2 className="text-xl font-bold mb-4">Th√™m sinh vi√™n m·ªõi</h2>
            <div className="space-y-4">
              <input
                type="text"
                placeholder="M√£ sinh vi√™n"
                className="w-full px-3 py-2 border border-gray-300 rounded-lg"
                value={formData.student_id}
                onChange={(e) => setFormData({...formData, student_id: e.target.value})}
              />
              <input
                type="text"
                placeholder="H·ªç t√™n"
                className="w-full px-3 py-2 border border-gray-300 rounded-lg"
                value={formData.student_name}
                onChange={(e) => setFormData({...formData, student_name: e.target.value})}
              />
              <input
                type="number"
                placeholder="NƒÉm nh·∫≠p h·ªçc"
                className="w-full px-3 py-2 border border-gray-300 rounded-lg"
                value={formData.enrolled_year}
                onChange={(e) => setFormData({...formData, enrolled_year: parseInt(e.target.value)})}
              />
              <input
                type="number"
                placeholder="M√£ kh√≥a h·ªçc"
                className="w-full px-3 py-2 border border-gray-300 rounded-lg"
                value={formData.course_id}
                onChange={(e) => setFormData({...formData, course_id: parseInt(e.target.value)})}
              />
              <select
                className="w-full px-3 py-2 border border-gray-300 rounded-lg"
                value={formData.training_level}
                onChange={(e) => setFormData({...formData, training_level: e.target.value})}
              >
                <option value="C·ª≠ nh√¢n">C·ª≠ nh√¢n</option>
                <option value="K·ªπ s∆∞">K·ªπ s∆∞</option>
                <option value="Th·∫°c s·ªπ">Th·∫°c s·ªπ</option>
                <option value="Ti·∫øn s·ªπ">Ti·∫øn s·ªπ</option>
              </select>
              <select
                className="w-full px-3 py-2 border border-gray-300 rounded-lg"
                value={formData.learning_status}
                onChange={(e) => setFormData({...formData, learning_status: e.target.value})}
              >
                <option value="ƒêang h·ªçc">ƒêang h·ªçc</option>
                <option value="B·∫£o l∆∞u">B·∫£o l∆∞u</option>
                <option value="Th√¥i h·ªçc">Th√¥i h·ªçc</option>
                <option value="Bu·ªôc th√¥i h·ªçc">Bu·ªôc th√¥i h·ªçc</option>
              </select>
              <select
                className="w-full px-3 py-2 border border-gray-300 rounded-lg"
                value={formData.gender}
                onChange={(e) => setFormData({...formData, gender: e.target.value})}
              >
                <option value="Nam">Nam</option>
                <option value="N·ªØ">N·ªØ</option>
              </select>
              <input
                type="text"
                placeholder="L·ªõp (t√πy ch·ªçn)"
                className="w-full px-3 py-2 border border-gray-300 rounded-lg"
                value={formData.classes}
                onChange={(e) => setFormData({...formData, classes: e.target.value})}
              />
              <input
                type="text"
                placeholder="H·ªçc k·ª≥ m·ªõi nh·∫•t (t√πy ch·ªçn)"
                className="w-full px-3 py-2 border border-gray-300 rounded-lg"
                value={formData.newest_semester}
                onChange={(e) => setFormData({...formData, newest_semester: e.target.value})}
              />
              <input
                type="text"
                placeholder="M√£ Tr∆∞·ªùng/Vi·ªán (t√πy ch·ªçn)"
                className="w-full px-3 py-2 border border-gray-300 rounded-lg"
                value={formData.department_id}
                onChange={(e) => setFormData({...formData, department_id: e.target.value})}
              />
            </div>
            <div className="flex justify-end space-x-2 mt-6">
              <button
                onClick={() => setShowCreateModal(false)}
                className="px-4 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50"
              >
                H·ªßy
              </button>
              <button
                onClick={handleCreateStudent}
                className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
              >
                T·∫°o
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Edit Modal */}
      {showEditModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-md">
            <h2 className="text-xl font-bold mb-4">S·ª≠a th√¥ng tin sinh vi√™n</h2>
            <div className="space-y-4">
              <input
                type="text"
                placeholder="M√£ sinh vi√™n"
                className="w-full px-3 py-2 border border-gray-300 rounded-lg"
                value={formData.student_id}
                onChange={(e) => setFormData({...formData, student_id: e.target.value})}
              />
              <input
                type="text"
                placeholder="H·ªç t√™n"
                className="w-full px-3 py-2 border border-gray-300 rounded-lg"
                value={formData.student_name}
                onChange={(e) => setFormData({...formData, student_name: e.target.value})}
              />
              <input
                type="number"
                placeholder="NƒÉm nh·∫≠p h·ªçc"
                className="w-full px-3 py-2 border border-gray-300 rounded-lg"
                value={formData.enrolled_year}
                onChange={(e) => setFormData({...formData, enrolled_year: parseInt(e.target.value)})}
              />
              <input
                type="number"
                placeholder="M√£ kh√≥a h·ªçc"
                className="w-full px-3 py-2 border border-gray-300 rounded-lg"
                value={formData.course_id}
                onChange={(e) => setFormData({...formData, course_id: parseInt(e.target.value)})}
              />
              <select
                className="w-full px-3 py-2 border border-gray-300 rounded-lg"
                value={formData.training_level}
                onChange={(e) => setFormData({...formData, training_level: e.target.value})}
              >
                <option value="C·ª≠ nh√¢n">C·ª≠ nh√¢n</option>
                <option value="K·ªπ s∆∞">K·ªπ s∆∞</option>
                <option value="Th·∫°c s·ªπ">Th·∫°c s·ªπ</option>
                <option value="Ti·∫øn s·ªπ">Ti·∫øn s·ªπ</option>
              </select>
              <select
                className="w-full px-3 py-2 border border-gray-300 rounded-lg"
                value={formData.learning_status}
                onChange={(e) => setFormData({...formData, learning_status: e.target.value})}
              >
                <option value="ƒêang h·ªçc">ƒêang h·ªçc</option>
                <option value="B·∫£o l∆∞u">B·∫£o l∆∞u</option>
                <option value="Th√¥i h·ªçc">Th√¥i h·ªçc</option>
                <option value="Bu·ªôc th√¥i h·ªçc">Bu·ªôc th√¥i h·ªçc</option>
              </select>
              <select
                className="w-full px-3 py-2 border border-gray-300 rounded-lg"
                value={formData.gender}
                onChange={(e) => setFormData({...formData, gender: e.target.value})}
              >
                <option value="Nam">Nam</option>
                <option value="N·ªØ">N·ªØ</option>
              </select>
              <input
                type="text"
                placeholder="L·ªõp (t√πy ch·ªçn)"
                className="w-full px-3 py-2 border border-gray-300 rounded-lg"
                value={formData.classes}
                onChange={(e) => setFormData({...formData, classes: e.target.value})}
              />
              <input
                type="text"
                placeholder="H·ªçc k·ª≥ m·ªõi nh·∫•t (t√πy ch·ªçn)"
                className="w-full px-3 py-2 border border-gray-300 rounded-lg"
                value={formData.newest_semester}
                onChange={(e) => setFormData({...formData, newest_semester: e.target.value})}
              />
              <input
                type="text"
                placeholder="M√£ Tr∆∞·ªùng/Vi·ªán (t√πy ch·ªçn)"
                className="w-full px-3 py-2 border border-gray-300 rounded-lg"
                value={formData.department_id}
                onChange={(e) => setFormData({...formData, department_id: e.target.value})}
              />
            </div>
            <div className="flex justify-end space-x-2 mt-6">
              <button
                onClick={() => setShowEditModal(false)}
                className="px-4 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50"
              >
                H·ªßy
              </button>
              <button
                onClick={handleUpdateStudent}
                className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
              >
                C·∫≠p nh·∫≠t
              </button>
            </div>
          </div>
        </div>
      )}

      {/* View Modal */}
      {showViewModal && selectedStudent && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-md">
            <h2 className="text-xl font-bold mb-4">Th√¥ng tin sinh vi√™n</h2>
            <div className="space-y-3">
              <div><strong>M√£ sinh vi√™n:</strong> {selectedStudent.student_id}</div>
              <div><strong>H·ªç t√™n:</strong> {selectedStudent.student_name}</div>
              <div><strong>Email:</strong> {selectedStudent.email}</div>
              <div><strong>NƒÉm nh·∫≠p h·ªçc:</strong> {selectedStudent.enrolled_year}</div>
              <div><strong>Tr∆∞·ªùng/Vi·ªán:</strong> {selectedStudent.department_id || 'Ch∆∞a ph√¢n Tr∆∞·ªùng/Vi·ªán'}</div>
              <div><strong>Kh√≥a:</strong> {selectedStudent.course_id}</div>
              <div><strong>B·∫≠c ƒë√†o t·∫°o:</strong> {selectedStudent.training_level}</div>
              <div><strong>Tr·∫°ng th√°i h·ªçc t·∫≠p:</strong> {selectedStudent.learning_status}</div>
              <div><strong>Gi·ªõi t√≠nh:</strong> {selectedStudent.gender}</div>
              <div><strong>L·ªõp:</strong> {selectedStudent.classes || 'Ch∆∞a c√≥'}</div>
              <div><strong>CPA:</strong> {selectedStudent.cpa}</div>
              <div><strong>NƒÉm h·ªçc:</strong> {selectedStudent.year_level}</div>
              <div><strong>M·ª©c c·∫£nh b√°o:</strong> {selectedStudent.warning_level}</div>
            </div>
            <div className="flex justify-end mt-6">
              <button
                onClick={() => setShowViewModal(false)}
                className="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700"
              >
                ƒê√≥ng
              </button>
            </div>
          </div>
        </div>
      )}

      {showUploadModal && (
        <StudentUploadModal 
          onClose={() => setShowUploadModal(false)} 
          onSuccess={() => {
            fetchStudents()
            setShowUploadModal(false)
          }} 
        />
      )}
    </div>
  )
}

// Component StudentUploadModal
const StudentUploadModal = ({ onClose, onSuccess }: { onClose: () => void, onSuccess: () => void }) => {
  const [file, setFile] = useState<File | null>(null)
  const [loading, setLoading] = useState(false)
  const [dragActive, setDragActive] = useState(false)
  const fileInputRef = useRef<HTMLInputElement>(null)

  const handleDrag = (e: React.DragEvent) => {
    e.preventDefault()
    e.stopPropagation()
    if (e.type === "dragenter" || e.type === "dragover") {
      setDragActive(true)
    } else if (e.type === "dragleave") {
      setDragActive(false)
    }
  }

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault()
    e.stopPropagation()
    setDragActive(false)
    
    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      setFile(e.dataTransfer.files[0])
    }
  }

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      setFile(e.target.files[0])
    }
  }

  const processExcelFile = async (file: File): Promise<any[]> => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader()
      reader.onload = (e) => {
        try {
          const data = new Uint8Array(e.target?.result as ArrayBuffer)
          const workbook = XLSX.read(data, { type: 'array' })
          const worksheet = workbook.Sheets[workbook.SheetNames[0]]
          const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 })
          
          // T√¨m d√≤ng header c√≥ ch·ª©a c√°c c·ªôt c·∫ßn thi·∫øt
          let headerRowIndex = -1
          for (let i = 0; i < jsonData.length; i++) {
            const row = jsonData[i] as any[]
            if (row.some(cell => 
              cell && (
                String(cell).toLowerCase().includes('h·ªç v√† t√™n') || 
                String(cell).toLowerCase().includes('mssv') ||
                String(cell).toLowerCase().includes('nƒÉm nh·∫≠p h·ªçc') ||
                String(cell).toLowerCase().includes('gi·ªõi t√≠nh') ||
                String(cell).toLowerCase().includes('ng√†nh h·ªçc')
              )
            )) {
              headerRowIndex = i
              break
            }
          }

          if (headerRowIndex === -1) {
            throw new Error('Kh√¥ng t√¨m th·∫•y header c√≥ c√°c c·ªôt: H·ªç v√† t√™n, MSSV, NƒÉm nh·∫≠p h·ªçc')
          }

          const headers = jsonData[headerRowIndex] as any[]
          const students: any[] = []

          // T√¨m index c·ªßa c√°c c·ªôt c·∫ßn thi·∫øt
          const nameIndex = headers.findIndex((h: any) => 
            h && String(h).toLowerCase().includes('h·ªç v√† t√™n')
          )
          const studentIdIndex = headers.findIndex((h: any) => 
            h && String(h).toLowerCase().includes('mssv')
          )
          const enrolledYearIndex = headers.findIndex((h: any) => 
            h && String(h).toLowerCase().includes('nƒÉm nh·∫≠p h·ªçc')
          )
          const courseIndex = headers.findIndex((h: any) => 
            h && String(h).toLowerCase().includes('ng√†nh h·ªçc')
          )
          const trainingLevelIndex = headers.findIndex((h: any) => 
            h && String(h).toLowerCase().includes('tr√¨nh ƒë·ªô ƒë√†o t·∫°o')
          )
          const genderIndex = headers.findIndex((h: any) => 
            h && String(h).toLowerCase().includes('gi·ªõi t√≠nh')
          )
          const classIndex = headers.findIndex((h: any) => 
            h && String(h).toLowerCase().includes('l·ªõp h·ªçc')
          )
          const departmentIndex = headers.findIndex((h: any) => 
            h && String(h).toLowerCase().includes('tr∆∞·ªùng/vi·ªán')
          )

          if (nameIndex === -1 || studentIdIndex === -1 || enrolledYearIndex === -1) {
            throw new Error('Kh√¥ng t√¨m th·∫•y c√°c c·ªôt b·∫Øt bu·ªôc: H·ªç v√† t√™n, MSSV, NƒÉm nh·∫≠p h·ªçc')
          }

          // X·ª≠ l√Ω d·ªØ li·ªáu t·ª´ c√°c d√≤ng sau header
          for (let i = headerRowIndex + 1; i < jsonData.length; i++) {
            const row = jsonData[i] as any[]
            
            if (row && row.length > 0 && row[nameIndex]) {
              const enrolledYear = parseInt(String(row[enrolledYearIndex] || '').trim())
              
              // Map course code to course_id
              const courseCode = courseIndex !== -1 ? String(row[courseIndex] || '').trim() : 'IT-E6'
              let courseId = 1 // Default to IT-E6 course
              if (courseCode === 'IT-E6') {
                courseId = 1
              }

              const student = {
                student_name: String(row[nameIndex] || '').trim(),
                student_id: String(row[studentIdIndex] || '').trim(),
                enrolled_year: enrolledYear,
                course_id: courseId,
                training_level: trainingLevelIndex !== -1 ? String(row[trainingLevelIndex] || 'C·ª≠ nh√¢n').trim() : 'C·ª≠ nh√¢n',
                learning_status: 'ƒêang h·ªçc',
                gender: genderIndex !== -1 ? String(row[genderIndex] || 'Nam').trim() : 'Nam',
                classes: classIndex !== -1 ? String(row[classIndex] || '').trim() : null,
                newest_semester: enrolledYear ? String(enrolledYear) + '1' : null,
                department_id: departmentIndex !== -1 ? String(row[departmentIndex] || '').trim() : null
              }

              if (student.student_name && student.student_id && student.enrolled_year) {
                students.push(student)
              }
            }
          }

          resolve(students)
        } catch (error) {
          reject(error)
        }
      }
      reader.onerror = () => reject(new Error('Kh√¥ng th·ªÉ ƒë·ªçc file'))
      reader.readAsArrayBuffer(file)
    })
  }

  const handleUpload = async () => {
    if (!file) {
      alert('Vui l√≤ng ch·ªçn file Excel')
      return
    }

    setLoading(true)
    try {
      const students = await processExcelFile(file)
      
      if (students.length === 0) {
        alert('Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu sinh vi√™n h·ª£p l·ªá trong file')
        setLoading(false)
        return
      }

      // Log d·ªØ li·ªáu ƒë·ªÉ debug
      console.log('Processed students data:', students)

      // G·ª≠i t·ª´ng sinh vi√™n l√™n server
      let successCount = 0
      let errorCount = 0
      
      for (const student of students) {
        console.log('Sending student:', student)
        try {
          const response = await fetch('http://localhost:8000/students/', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(student)
          })
          
          if (response.ok) {
            successCount++
            console.log(`‚úì T·∫°o th√†nh c√¥ng sinh vi√™n ${student.student_name}`)
          } else {
            const errorText = await response.text()
            if (errorText.includes('student_id ƒë√£ t·ªìn t·∫°i')) {
              console.log(`‚ö† Sinh vi√™n ${student.student_name} (${student.student_id}) ƒë√£ t·ªìn t·∫°i, b·ªè qua`)
            } else {
              errorCount++
              console.error(`‚úó L·ªói khi t·∫°o sinh vi√™n ${student.student_name}:`, errorText)
            }
          }
        } catch (error) {
          errorCount++
          console.error(`‚úó L·ªói khi t·∫°o sinh vi√™n ${student.student_name}:`, error)
        }
      }

      const duplicateCount = students.length - successCount - errorCount
      let message = `Ho√†n th√†nh! T·∫°o th√†nh c√¥ng ${successCount} sinh vi√™n`
      if (duplicateCount > 0) {
        message += `, b·ªè qua ${duplicateCount} sinh vi√™n ƒë√£ t·ªìn t·∫°i`
      }
      if (errorCount > 0) {
        message += `, l·ªói ${errorCount} sinh vi√™n`
      }
      alert(message)
      
      if (successCount > 0) {
        onSuccess()
      }
      onClose()
    } catch (error) {
      console.error('Error processing file:', error)
      alert('C√≥ l·ªói khi x·ª≠ l√Ω file: ' + (error as Error).message)
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white p-6 rounded-lg max-w-md w-full mx-4">
        <h3 className="text-xl font-bold mb-4">Upload danh s√°ch sinh vi√™n</h3>
        
        <div 
          className={`border-2 border-dashed rounded-lg p-6 text-center ${
            dragActive ? 'border-blue-400 bg-blue-50' : 'border-gray-300'
          }`}
          onDragEnter={handleDrag}
          onDragLeave={handleDrag}
          onDragOver={handleDrag}
          onDrop={handleDrop}
        >
          {file ? (
            <div className="text-green-600">
              <p>üìÅ {file.name}</p>
              <p className="text-sm text-gray-500 mt-1">
                K√≠ch th∆∞·ªõc: {(file.size / 1024).toFixed(1)} KB
              </p>
            </div>
          ) : (
            <div>
              <p className="text-gray-600 mb-2">
                K√©o th·∫£ file Excel v√†o ƒë√¢y ho·∫∑c
              </p>
              <button
                onClick={() => fileInputRef.current?.click()}
                className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
              >
                Ch·ªçn file
              </button>
              <p className="text-sm text-gray-500 mt-2">
                H·ªó tr·ª£ file .xlsx, .xls
              </p>
            </div>
          )}
        </div>

        <input
          ref={fileInputRef}
          type="file"
          accept=".xlsx,.xls"
          onChange={handleFileChange}
          className="hidden"
        />

        <div className="mt-4 text-sm text-gray-600">
          <p className="font-semibold mb-1">Y√™u c·∫ßu ƒë·ªãnh d·∫°ng Excel:</p>
          <ul className="text-xs">
            <li>‚Ä¢ H·ªç v√† t√™n (b·∫Øt bu·ªôc)</li>
            <li>‚Ä¢ MSSV (b·∫Øt bu·ªôc)</li>
            <li>‚Ä¢ NƒÉm nh·∫≠p h·ªçc (b·∫Øt bu·ªôc)</li>
            <li>‚Ä¢ M√£ ng√†nh (t√πy ch·ªçn)</li>
            <li>‚Ä¢ B·∫≠c ƒë√†o t·∫°o (t√πy ch·ªçn)</li>
            <li>‚Ä¢ T√¨nh tr·∫°ng h·ªçc t·∫≠p (t√πy ch·ªçn)</li>
            <li>‚Ä¢ Gi·ªõi t√≠nh (t√πy ch·ªçn)</li>
          </ul>
        </div>

        <div className="flex justify-end space-x-2 mt-6">
          <button
            onClick={onClose}
            className="px-4 py-2 text-gray-600 border rounded hover:bg-gray-50"
            disabled={loading}
          >
            H·ªßy
          </button>
          <button
            onClick={handleUpload}
            disabled={!file || loading}
            className="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 disabled:bg-gray-300 disabled:cursor-not-allowed"
          >
            {loading ? 'ƒêang x·ª≠ l√Ω...' : 'Upload'}
          </button>
        </div>
      </div>
    </div>
  )
}

export default StudentsManagement
