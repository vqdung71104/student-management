"""
Chatbot Routes - API endpoints cho chatbot
"""
from fastapi import APIRouter, HTTPException
from app.chatbot.hybrid_classifier import HybridIntentClassifier
from app.schemas.chatbot_schema import ChatMessage, ChatResponse, IntentsResponse, IntentInfo


router = APIRouter(prefix="/chatbot", tags=["Chatbot"])

# Initialize hybrid intent classifier (PhoBERT + Gemini)
intent_classifier = HybridIntentClassifier(use_phobert=True, use_gemini=True)


@router.post("/chat", response_model=ChatResponse)
async def chat(message: ChatMessage):
    """
    Endpoint nh·∫≠n tin nh·∫Øn t·ª´ user v√† tr·∫£ v·ªÅ ph·∫£n h·ªìi c·ªßa chatbot
    
    - **message**: Tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng
    
    Returns:
        - **text**: C√¢u tr·∫£ l·ªùi t·ª´ chatbot
        - **intent**: Intent ƒë∆∞·ª£c ph√¢n lo·∫°i
        - **confidence**: ƒê·ªô tin c·∫≠y (high/low)
    """
    try:
        # Ph√¢n lo·∫°i intent
        result = await intent_classifier.classify_intent(message.message)
        
        intent = result["intent"]
        confidence = result["confidence"]
        
        # T·∫°o response text d·ª±a tr√™n intent v√† confidence
        if confidence == "high" and intent != "unknown":
            # X·ª≠ l√Ω c√°c intent ƒë·∫∑c bi·ªát
            if intent == "greeting":
                response_text = "Xin ch√†o! M√¨nh l√† tr·ª£ l√Ω ·∫£o c·ªßa h·ªá th·ªëng qu·∫£n l√Ω sinh vi√™n. M√¨nh c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?"
            elif intent == "thanks":
                response_text = "R·∫•t vui ƒë∆∞·ª£c gi√∫p ƒë·ª° b·∫°n! N·∫øu c√≥ th·∫Øc m·∫Øc g√¨ kh√°c, h√£y h·ªèi m√¨nh nh√© üòä"
            else:
                # Intent th√¥ng th∆∞·ªùng
                intent_friendly_name = intent_classifier.get_intent_friendly_name(intent)
                response_text = f"B·∫°n ƒë·ªãnh {intent_friendly_name} ph·∫£i kh√¥ng?"
        else:
            # Kh√¥ng hi·ªÉu √Ω ƒë·ªãnh
            response_text = "M√¨nh ch∆∞a hi·ªÉu r√µ c√¢u h·ªèi c·ªßa b·∫°n, b·∫°n vui l√≤ng di·ªÖn gi·∫£i l·∫°i ƒë∆∞·ª£c kh√¥ng?"
        
        return ChatResponse(
            text=response_text,
            intent=intent,
            confidence=confidence
        )
        
    except Exception as e:
        print(f"L·ªói trong chatbot endpoint: {str(e)}")
        raise HTTPException(
            status_code=500,
            detail=f"L·ªói x·ª≠ l√Ω tin nh·∫Øn: {str(e)}"
        )


@router.get("/intents", response_model=IntentsResponse)
async def get_available_intents():
    """
    L·∫•y danh s√°ch c√°c intent m√† chatbot c√≥ th·ªÉ nh·∫≠n di·ªán
    
    Returns:
        IntentsResponse: Danh s√°ch c√°c intent v·ªõi tag, description v√† examples
    """
    try:
        intents_list = []
        for intent in intent_classifier.intents.get("intents", []):
            intents_list.append(
                IntentInfo(
                    tag=intent["tag"],
                    description=intent["description"],
                    examples=intent["patterns"][:3]  # L·∫•y 3 v√≠ d·ª•
                )
            )
        
        return IntentsResponse(
            total=len(intents_list),
            intents=intents_list
        )
        
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"L·ªói l·∫•y danh s√°ch intent: {str(e)}"
        )
